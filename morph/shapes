#!/bin/bash

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
MORPH_DIR="$SCRIPT_DIR"
PFAEDLE_DIR="$MORPH_DIR/pfaedle"
MORPH_TMP_DIR="$MORPH_DIR/../.tmp/morph"
OSM_DIR="$MORPH_TMP_DIR/osm"
GTFS_SHAPED_DIR="$MORPH_TMP_DIR/shaped"
CONFIG_PATH="$MORPH_DIR/pfaedle.cfg"
GTFS_DIR="$MORPH_DIR/../gtfs"

GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}Morph GTFS Shape Generator${NC}"
    echo ""
    echo "Usage: shapes [command] [options]"
    echo ""
    echo "Commands:"
    echo "  init              Build pfaedle and download OSM data"
    echo "  add [options] [gtfs] [osm]  Add shapes to a GTFS file"
    echo "  all [options]     Process all GTFS files"
    echo ""
    echo "Options for 'add' and 'all':"
    echo "  --overwrite       Replace the original GTFS file with the shaped version"
    echo "  --jobs=N          Number of parallel jobs to run (default: number of CPU cores)"
    echo ""
    echo "Arguments:"
    echo "  [gtfs]            Path to GTFS file"
    echo "  [osm]             Path to OSM file (default: .tmp/morph/osm/slovakia-latest.osm.bz2)"
}

build_pfaedle() {
    if [ ! -f "$PFAEDLE_DIR/build/pfaedle" ]; then
        echo -e "${BLUE}Building pfaedle...${NC}"
        mkdir -p "$PFAEDLE_DIR/build"
        cd "$PFAEDLE_DIR/build" || exit 1
        cmake ..
        make -j
        cd - > /dev/null || exit 1
        echo -e "${GREEN}pfaedle built successfully${NC}"
    else
        echo -e "${GREEN}pfaedle already built${NC}"
    fi
}

download_osm() {
    mkdir -p "$OSM_DIR"

    local merged_file="$OSM_DIR/latest.osm"
    local merged_file_compressed="$OSM_DIR/latest.osm.bz2"

    if [ -f "$merged_file_compressed" ] && [ ! -f "$merged_file" ]; then
        echo -e "${BLUE}Found cached compressed OSM data. Decompressing...${NC}"
        pbzip2 -dk "$merged_file_compressed"
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Successfully decompressed cached OSM data${NC}"
            return
        else
            echo -e "${RED}Failed to decompress cached OSM data, downloading fresh copy${NC}"
        fi
    fi

    if [ -f "$merged_file" ]; then
        echo -e "${GREEN}Merged OSM data already exists${NC}"
        return
    fi

    local countries=(
        "slovakia-latest.osm.bz2"
        "czech-republic-latest.osm.bz2"
        "austria-latest.osm.bz2"
    )

    local osmconvert_path="$OSM_DIR/osmconvert64"

    if [ ! -f "$osmconvert_path" ]; then
        echo -e "${BLUE}Downloading osmconvert...${NC}"
        wget -q --show-progress "http://m.m.i24.cc/osmconvert64" -O "$osmconvert_path"
        chmod +x "$osmconvert_path"
        echo -e "${GREEN}osmconvert downloaded${NC}"
    fi

    local osm_files=()

    for country in "${countries[@]}"; do
        local osm_file_zip="$OSM_DIR/$country"
        local osm_file="${osm_file_zip%.bz2}"

        if [ ! -f "$osm_file" ]; then
            if [ ! -f "$osm_file_zip" ]; then
                echo -e "${BLUE}Downloading OSM data for ${country%.osm.bz2}...${NC}"
                wget --show-progress --timeout=60 --tries=2 --retry-connrefused "https://download.geofabrik.de/europe/$country" -O "$osm_file_zip"
            fi

            echo -e "${BLUE}Unzipping OSM data for ${country%.osm.bz2}...${NC}"
            pbzip2 -d "$osm_file_zip"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}OSM data for ${country%.osm.bz2} unzipped successfully${NC}"
                osm_files+=("$osm_file")
            else
                echo -e "${RED}Failed to unzip OSM data for ${country%.osm.bz2}${NC}"
                continue
            fi
        else
            echo -e "${GREEN}OSM data for ${country%.osm.bz2} already exists${NC}"
            osm_files+=("$osm_file")
        fi
    done

    echo -e "${BLUE}Merging OSM files...${NC}"
    "$osmconvert_path" "${osm_files[@]}" -o="$merged_file"

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}OSM files merged successfully into $merged_file${NC}"

        echo -e "${BLUE}Setting merged file as default for shape generation${NC}"
    else
        echo -e "${RED}Failed to merge OSM files${NC}"
        exit 1
    fi

    for osm_file in "${osm_files[@]}"; do
        if [ -f "$osm_file" ]; then
            rm "$osm_file"
            echo -e "${BLUE}Removed OSM file: $osm_file${NC}"
        fi
    done
}

add_shapes() {
    local overwrite=false
    local args=()

    for arg in "$@"; do
        if [ "$arg" = "--overwrite" ]; then
            overwrite=true
        else
            args+=("$arg")
        fi
    done

    local gtfs_file="${args[0]}"
    local osm_file="${args[1]}"

    if [ -z "$gtfs_file" ]; then
        echo -e "${RED}Error: GTFS file not specified${NC}"
        show_help
        exit 1
    fi

    if [ ! -f "$gtfs_file" ]; then
        echo -e "${RED}Error: GTFS file not found: $gtfs_file${NC}"
        exit 1
    fi

    if [ -z "$osm_file" ]; then
        osm_file="$OSM_DIR/latest.osm"
    elif [ ! -f "$osm_file" ] && [ -f "$OSM_DIR/$(basename "$osm_file")" ]; then
        osm_file="$OSM_DIR/$(basename "$osm_file")"
    fi

    if [ ! -f "$osm_file" ]; then
        echo -e "${RED}Error: OSM file not found: $osm_file${NC}"
        exit 1
    fi

    local agency=$(basename "$gtfs_file" .zip)
    local output_dir="$GTFS_SHAPED_DIR/$agency"
    local temp_zip="$GTFS_SHAPED_DIR/${agency}.zip"

    mkdir -p "$GTFS_SHAPED_DIR"

    echo -e "${BLUE}Adding shapes to $gtfs_file using OSM data from $osm_file${NC}"
    "$PFAEDLE_DIR/build/pfaedle" -c "$CONFIG_PATH" -x "$osm_file" -m bus "$gtfs_file" -o "$output_dir"

    if [ $? -eq 0 ]; then
        if [ "$overwrite" = true ]; then
            echo -e "${YELLOW}Creating zip file from shaped GTFS...${NC}"

            [ -f "$temp_zip" ] && rm "$temp_zip"

            (cd "$output_dir" && zip -r "$temp_zip" .)

            if [ $? -eq 0 ]; then
                echo -e "${YELLOW}Overwriting original GTFS file...${NC}"
                cp "$temp_zip" "$gtfs_file"
                echo -e "${GREEN}Successfully overwrote $gtfs_file with shaped version${NC}"
            else
                echo -e "${RED}Failed to create zip file from shaped GTFS${NC}"
                exit 1
            fi
        else
            echo -e "${GREEN}New GTFS with shapes saved to $output_dir${NC}"
        fi
    else
        echo -e "${RED}Failed to add shapes to $gtfs_file${NC}"
        exit 1
    fi
}

process_all_gtfs() {
    if [ ! -d "$GTFS_DIR" ]; then
        echo -e "${RED}Error: GTFS directory not found: $GTFS_DIR${NC}"
        exit 1
    fi

    local overwrite=false
    local max_parallel=$(nproc 2>/dev/null || echo 4)

    for arg in "$@"; do
        if [ "$arg" = "--overwrite" ]; then
            overwrite=true
        elif [[ "$arg" =~ ^--jobs=([0-9]+)$ ]]; then
            max_parallel="${BASH_REMATCH[1]}"
        fi
    done

    local osm_file="$OSM_DIR/latest.osm"
    local total_files=$(find "$GTFS_DIR" -type f -name "*.zip" | wc -l)

    if [ "$total_files" -eq 0 ]; then
        echo -e "${RED}No GTFS files found in $GTFS_DIR${NC}"
        exit 1
    fi

    echo -e "${BLUE}Processing $total_files GTFS files with up to $max_parallel parallel jobs...${NC}"

    local tmp_dir=$(mktemp -d)
    local sem="$tmp_dir/semaphore"

    mkfifo "$sem"
    exec 3<>"$sem"
    rm "$sem"

    for ((i=0; i<max_parallel; i++)); do
        echo >&3
    done

    pids=()

    while read -r gtfs_file; do
        read -u 3

        {
            local basename_file=$(basename "$gtfs_file")
            echo -e "${BLUE} Processing $basename_file${NC}"

            if [ "$overwrite" = true ]; then
                add_shapes "--overwrite" "$gtfs_file" "$osm_file" 2>&1 | while IFS= read -r line; do
                    echo -e "${BLUE}[${basename_file}]${NC} $line"
                done
                status=${PIPESTATUS[0]}
            else
                add_shapes "$gtfs_file" "$osm_file" 2>&1 | while IFS= read -r line; do
                    echo -e "${BLUE}[${basename_file}]${NC} $line"
                done
                status=${PIPESTATUS[0]}
            fi

            local status=$?
            if [ $status -eq 0 ]; then
                echo -e "${GREEN}Successfully processed $basename_file${NC}"
            else
                echo -e "${RED}Failed to process $basename_file${NC}"
                echo -e "${RED}See log at $log_file${NC}"
            fi

            echo >&3
        } &

        pids+=($!)

    done < <(find "$GTFS_DIR" -type f -name "*.zip")

    for pid in "${pids[@]}"; do
        wait $pid
    done

    exec 3>&-
    rmdir "$tmp_dir"

    echo -e "${GREEN}All $total_files GTFS files processed${NC}"
}

case "$1" in
    init)
        build_pfaedle
        download_osm
        ;;
    add)
        shift
        add_shapes "$@"
        ;;
    all)
        shift
        process_all_gtfs "$@"
        ;;
    -h|--help|help)
        show_help
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}"
        show_help
        exit 1
        ;;
esac
